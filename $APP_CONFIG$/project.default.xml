<application>
  <component name="ProjectManager">
    <defaultProject>
      <component name="AutoImportSettings">
        <option name="autoReloadType" value="SELECTIVE" />
      </component>
      <component name="CompilerConfiguration">
        <annotationProcessing>
          <profile default="true" name="Default" enabled="true" />
        </annotationProcessing>
      </component>
      <component name="JUnitGeneratorProjectSettings">
        <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
        <option name="selectedTemplateKey" value="JUnit 4" />
        <option name="vmTemplates">
          <map>
            <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
            <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author ljhan2&#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass { &#10;&#10;@Before&#10;public void before() throws Exception { &#10;} &#10;&#10;@After&#10;public void after() throws Exception { &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;} &#10;#end" />
          </map>
        </option>
      </component>
      <component name="JavaDocConfiguration">
        <GENERAL>
          <MODE>UPDATE</MODE>
          <OVERRIDDEN_METHODS>false</OVERRIDDEN_METHODS>
          <SPLITTED_CLASS_NAME>true</SPLITTED_CLASS_NAME>
          <LEVELS>
            <LEVEL>TYPE</LEVEL>
            <LEVEL>METHOD</LEVEL>
            <LEVEL>FIELD</LEVEL>
          </LEVELS>
          <VISIBILITIES>
            <VISIBILITY>PROTECTED</VISIBILITY>
            <VISIBILITY>DEFAULT</VISIBILITY>
            <VISIBILITY>PUBLIC</VISIBILITY>
          </VISIBILITIES>
        </GENERAL>
        <TEMPLATES>
          <CLASSES>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+interface\s+\w+.*</KEY>
              <VALUE>/**\n
 * The interface ${name}.\n
&lt;#if element.typeParameters?has_content&gt;        * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
        * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+enum\s+\w+.*</KEY>
              <VALUE>/**\n
 * The enum ${name}.\n
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+class\s+\w+.*</KEY>
              <VALUE>/**\n
 * The type ${name}.\n
&lt;#if element.typeParameters?has_content&gt;        * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
        * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * The type ${name}.\n
 */</VALUE>
            </CLASS>
          </CLASSES>
          <CONSTRUCTORS>
            <CONSTRUCTOR>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * Instantiates a new ${name}.\n
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </CONSTRUCTOR>
          </CONSTRUCTORS>
          <METHODS>
            <METHOD>
              <KEY>^.*(public|protected|private)*\s*.*(\w(\s*&lt;.+&gt;)*)+\s+get\w+\s*\(.*\).+</KEY>
              <VALUE>/**\n
 * Gets ${partName}.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${partName}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>^.*(public|protected|private)*\s*.*(void|\w(\s*&lt;.+&gt;)*)+\s+set\w+\s*\(.*\).+</KEY>
              <VALUE>/**\n
 * Sets ${partName}.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${partName}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>^.*((public\s+static)|(static\s+public))\s+void\s+main\s*\(\s*String\s*(\[\s*\]|\.\.\.)\s+\w+\s*\).+</KEY>
              <VALUE>/**\n
 * The entry point of application.\n

     &lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
     * @param ${element.parameterList.parameters[0].name} the input arguments\n
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * ${name}&lt;#if isNotVoid&gt; ${return}&lt;/#if&gt;.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${return}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
          </METHODS>
          <FIELDS>
            <FIELD>
              <KEY>^.*(public|protected|private)*.+static.*(\w\s\w)+.+</KEY>
              <VALUE>/**\n
 * The constant ${element.getName()}.\n
 */</VALUE>
            </FIELD>
            <FIELD>
              <KEY>^.*(public|protected|private)*.*(\w\s\w)+.+</KEY>
              <VALUE>/**\n
    &lt;#if element.parent.isInterface()&gt;
        * The constant ${element.getName()}.\n
&lt;#else&gt;
        * The ${name}.\n
&lt;/#if&gt; */</VALUE>
            </FIELD>
            <FIELD>
              <KEY>.+</KEY>
              <VALUE>/**\n
    &lt;#if element.parent.isEnum()&gt;
        *${name} ${typeName}.\n
&lt;#else&gt;
        * The ${name}.\n
&lt;/#if&gt;*/</VALUE>
            </FIELD>
          </FIELDS>
        </TEMPLATES>
      </component>
      <component name="MavenImportPreferences">
        <option name="generalSettings">
          <MavenGeneralSettings>
            <option name="mavenHome" value="D:\dev\buildtools\maven\apache-maven-3.3.9" />
          </MavenGeneralSettings>
        </option>
      </component>
      <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
      <component name="ProjectViewState">
        <option name="abbreviatePackageNames" value="true" />
        <option name="autoscrollFromSource" value="true" />
        <option name="hideEmptyMiddlePackages" value="true" />
        <option name="showExcludedFiles" value="true" />
        <option name="showLibraryContents" value="true" />
      </component>
      <component name="PropertiesComponent">
        <property name="last_opened_file_path" value="D:/soft/ide/jetbrains/ideaIU2019.3/wk-cbb" />
        <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
        <property name="nodejs_npm_path_reset_for_default_project" value="true" />
        <property name="project.structure.last.edited" value="Project" />
        <property name="project.structure.proportion" value="0.15" />
        <property name="project.structure.side.proportion" value="0.2" />
        <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
      </component>
      <component name="SvnConfiguration">
        <configuration>C:\Users\Administrator\AppData\Roaming\Subversion</configuration>
      </component>
      <component name="arthas.idea.plugin">
        <option name="hotRedefineRedis" value="true" />
        <option name="redisAddress" value="" />
        <option name="redisAuth" value="" />
        <option name="redisCacheKey" value="" />
      </component>
      <component name="masterDetails">
        <states>
          <state key="GlobalLibrariesConfigurable.UI">
            <settings>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="JdkListConfigurable.UI">
            <settings>
              <last-edited>1.8</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ProjectJDKs.UI">
            <settings>
              <last-edited>1.8</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ProjectLibrariesConfigurable.UI">
            <settings>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ScopeChooserConfigurable.UI">
            <settings>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
        </states>
      </component>
    </defaultProject>
  </component>
</application>